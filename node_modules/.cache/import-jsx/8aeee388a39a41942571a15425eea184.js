// Table.js

const React = require('react');
const {
  useState,
  useEffect
} = React;
// Destructuring useState and useEffect from React

const {
  Box,
  Text,
  Newline
} = require('ink');
// Destructuring the components we need from ink

const cryptoData = require('../data.json');
// Fetching mock data

const Table = () => {
  const [data, setData] = useState([]);
  useEffect(() => {
    setData(cryptoData);
  });
  return /*#__PURE__*/React.createElement(Box, {
    borderStyle: "single",
    padding: 2,
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, "COIN")), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, "PRICE (USD)")), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, "24 HOUR CHANGE")), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, "ALL TIME HIGH"))), /*#__PURE__*/React.createElement(Newline, null), data.map(({
    id,
    name,
    current_price,
    price_change_percentage_24h,
    ath
  }) => /*#__PURE__*/React.createElement(Box, {
    key: id
  }, /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, name)), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, current_price)), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, price_change_percentage_24h)), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, ath)))));
};
module.exports = Table;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiY3J5cHRvRGF0YSIsIlRhYmxlIiwiZGF0YSIsInNldERhdGEiLCJtYXAiLCJpZCIsIm5hbWUiLCJjdXJyZW50X3ByaWNlIiwicHJpY2VfY2hhbmdlX3BlcmNlbnRhZ2VfMjRoIiwiYXRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlRhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRhYmxlLmpzXHJcblxyXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcblxyXG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xyXG4vLyBEZXN0cnVjdHVyaW5nIHVzZVN0YXRlIGFuZCB1c2VFZmZlY3QgZnJvbSBSZWFjdFxyXG5cclxuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUgfSA9IHJlcXVpcmUoJ2luaycpO1xyXG4vLyBEZXN0cnVjdHVyaW5nIHRoZSBjb21wb25lbnRzIHdlIG5lZWQgZnJvbSBpbmtcclxuXHJcbmNvbnN0IGNyeXB0b0RhdGEgPSByZXF1aXJlKCcuLi9kYXRhLmpzb24nKTtcclxuLy8gRmV0Y2hpbmcgbW9jayBkYXRhXHJcblxyXG5jb25zdCBUYWJsZSA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShbXSk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpPT57XHJcbiAgICAgICAgc2V0RGF0YShjcnlwdG9EYXRhKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEJveCBib3JkZXJTdHlsZT0nc2luZ2xlJyBwYWRkaW5nPXsyfSBmbGV4RGlyZWN0aW9uPSdjb2x1bW4nPlxyXG4gICAgICAgICAgICA8Qm94PlxyXG4gICAgICAgICAgICAgICAgPEJveCB3aWR0aD0nMjUlJz48VGV4dD5DT0lOPC9UZXh0PjwvQm94PlxyXG4gICAgICAgICAgICAgICAgPEJveCB3aWR0aD0nMjUlJz48VGV4dD5QUklDRSAoVVNEKTwvVGV4dD48L0JveD5cclxuICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9JzI1JSc+PFRleHQ+MjQgSE9VUiBDSEFOR0U8L1RleHQ+PC9Cb3g+XHJcbiAgICAgICAgICAgICAgICA8Qm94IHdpZHRoPScyNSUnPjxUZXh0PkFMTCBUSU1FIEhJR0g8L1RleHQ+PC9Cb3g+XHJcbiAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgICA8TmV3bGluZS8+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGEubWFwKCh7aWQsIG5hbWUsIGN1cnJlbnRfcHJpY2UsIHByaWNlX2NoYW5nZV9wZXJjZW50YWdlXzI0aCwgYXRofSkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxCb3gga2V5PXtpZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9JzI1JSc+PFRleHQ+e25hbWV9PC9UZXh0PjwvQm94PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IHdpZHRoPScyNSUnPjxUZXh0PntjdXJyZW50X3ByaWNlfTwvVGV4dD48L0JveD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCB3aWR0aD0nMjUlJz48VGV4dD57cHJpY2VfY2hhbmdlX3BlcmNlbnRhZ2VfMjRofTwvVGV4dD48L0JveD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCB3aWR0aD0nMjUlJz48VGV4dD57YXRofTwvVGV4dD48L0JveD5cclxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgICAgICAgICkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L0JveD5cclxuICAgIClcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUU5QixNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdILEtBQUs7QUFDckM7O0FBRUEsTUFBTTtFQUFFSSxHQUFHO0VBQUVDLElBQUk7RUFBRUM7QUFBUSxDQUFDLEdBQUdMLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDN0M7O0FBRUEsTUFBTU0sVUFBVSxHQUFHTixPQUFPLENBQUMsY0FBYyxDQUFDO0FBQzFDOztBQUVBLE1BQU1PLEtBQUssR0FBRyxNQUFNO0VBRWhCLE1BQU0sQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLENBQUMsR0FBR1IsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUVwQ0MsU0FBUyxDQUFDLE1BQUk7SUFDVk8sT0FBTyxDQUFDSCxVQUFVLENBQUM7RUFDdkIsQ0FBQyxDQUFDO0VBRUYsb0JBQ0ksb0JBQUMsR0FBRztJQUFDLFdBQVcsRUFBQyxRQUFRO0lBQUMsT0FBTyxFQUFFLENBQUU7SUFBQyxhQUFhLEVBQUM7RUFBUSxnQkFDeEQsb0JBQUMsR0FBRyxxQkFDQSxvQkFBQyxHQUFHO0lBQUMsS0FBSyxFQUFDO0VBQUssZ0JBQUMsb0JBQUMsSUFBSSxlQUFZLENBQU0sZUFDeEMsb0JBQUMsR0FBRztJQUFDLEtBQUssRUFBQztFQUFLLGdCQUFDLG9CQUFDLElBQUksc0JBQW1CLENBQU0sZUFDL0Msb0JBQUMsR0FBRztJQUFDLEtBQUssRUFBQztFQUFLLGdCQUFDLG9CQUFDLElBQUkseUJBQXNCLENBQU0sZUFDbEQsb0JBQUMsR0FBRztJQUFDLEtBQUssRUFBQztFQUFLLGdCQUFDLG9CQUFDLElBQUksd0JBQXFCLENBQU0sQ0FDL0MsZUFDTixvQkFBQyxPQUFPLE9BQUUsRUFFTkUsSUFBSSxDQUFDRSxHQUFHLENBQUMsQ0FBQztJQUFDQyxFQUFFO0lBQUVDLElBQUk7SUFBRUMsYUFBYTtJQUFFQywyQkFBMkI7SUFBRUM7RUFBRyxDQUFDLGtCQUNqRSxvQkFBQyxHQUFHO0lBQUMsR0FBRyxFQUFFSjtFQUFHLGdCQUNULG9CQUFDLEdBQUc7SUFBQyxLQUFLLEVBQUM7RUFBSyxnQkFBQyxvQkFBQyxJQUFJLFFBQUVDLElBQUksQ0FBUSxDQUFNLGVBQzFDLG9CQUFDLEdBQUc7SUFBQyxLQUFLLEVBQUM7RUFBSyxnQkFBQyxvQkFBQyxJQUFJLFFBQUVDLGFBQWEsQ0FBUSxDQUFNLGVBQ25ELG9CQUFDLEdBQUc7SUFBQyxLQUFLLEVBQUM7RUFBSyxnQkFBQyxvQkFBQyxJQUFJLFFBQUVDLDJCQUEyQixDQUFRLENBQU0sZUFDakUsb0JBQUMsR0FBRztJQUFDLEtBQUssRUFBQztFQUFLLGdCQUFDLG9CQUFDLElBQUksUUFBRUMsR0FBRyxDQUFRLENBQU0sQ0FFaEQsQ0FBQyxDQUVKO0FBRWQsQ0FBQztBQUVEQyxNQUFNLENBQUNDLE9BQU8sR0FBR1YsS0FBSyJ9