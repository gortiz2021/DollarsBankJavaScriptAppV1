const React = require("react");
const Gradient = require("ink-gradient");
const BigText = require("ink-big-text");
const {
  Box,
  Text,
  useInput,
  useApp
} = require("ink");
const importJsx = require("import-jsx");
const Transaction = importJsx("Transaction.js");
const OpenAccount = importJsx("./components/openAccount");
const Options = () => {
  const {
    exit
  } = useApp();
  useInput(input => {
    if (input === "q") {
      exit();
      console.log("Goodbye!");
    }
    if (input === "1") {
      console.log("1 was pressed");
      /*#__PURE__*/React.createElement(Transaction, null);
    }
    if (input === "2") {
      console.log("2 was pressed");
      /*#__PURE__*/React.createElement(OpenAccount, null);
    }
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Gradient, {
    name: "instagram"
  }, /*#__PURE__*/React.createElement(BigText, {
    text: "Dollars Bank ATM Welcomes You!!",
    align: "left",
    font: "shade"
  })), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Please Select an option:"), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "1. Transaction")), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "2. New Account")), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "q. Exit")))));
};
module.exports = Options;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJHcmFkaWVudCIsIkJpZ1RleHQiLCJCb3giLCJUZXh0IiwidXNlSW5wdXQiLCJ1c2VBcHAiLCJpbXBvcnRKc3giLCJUcmFuc2FjdGlvbiIsIk9wZW5BY2NvdW50IiwiT3B0aW9ucyIsImV4aXQiLCJpbnB1dCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsic3RhcnR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcclxuY29uc3QgR3JhZGllbnQgPSByZXF1aXJlKFwiaW5rLWdyYWRpZW50XCIpO1xyXG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZShcImluay1iaWctdGV4dFwiKTtcclxuY29uc3QgeyBCb3gsIFRleHQsIHVzZUlucHV0LCB1c2VBcHAgfSA9IHJlcXVpcmUoXCJpbmtcIik7XHJcbmNvbnN0IGltcG9ydEpzeCA9IHJlcXVpcmUoXCJpbXBvcnQtanN4XCIpO1xyXG5jb25zdCBUcmFuc2FjdGlvbiA9IGltcG9ydEpzeChcIlRyYW5zYWN0aW9uLmpzXCIpO1xyXG5jb25zdCBPcGVuQWNjb3VudCA9IGltcG9ydEpzeChcIi4vY29tcG9uZW50cy9vcGVuQWNjb3VudFwiKTtcclxuXHJcbmNvbnN0IE9wdGlvbnMgPSAoKSA9PiB7XHJcbiAgY29uc3QgeyBleGl0IH0gPSB1c2VBcHAoKTtcclxuICB1c2VJbnB1dCgoaW5wdXQpID0+IHtcclxuICAgIGlmIChpbnB1dCA9PT0gXCJxXCIpIHtcclxuICAgICAgZXhpdCgpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkdvb2RieWUhXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0ID09PSBcIjFcIikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIjEgd2FzIHByZXNzZWRcIik7XHJcbiAgICAgIDxUcmFuc2FjdGlvbiAvPjtcclxuICAgIH1cclxuICAgIGlmIChpbnB1dCA9PT0gXCIyXCIpIHtcclxuICAgICAgY29uc29sZS5sb2coXCIyIHdhcyBwcmVzc2VkXCIpO1xyXG4gICAgICA8T3BlbkFjY291bnQgLz47XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8R3JhZGllbnQgbmFtZT1cImluc3RhZ3JhbVwiPlxyXG4gICAgICAgIDxCaWdUZXh0XHJcbiAgICAgICAgICB0ZXh0PVwiRG9sbGFycyBCYW5rIEFUTSBXZWxjb21lcyBZb3UhIVwiXHJcbiAgICAgICAgICBhbGlnbj1cImxlZnRcIlxyXG4gICAgICAgICAgZm9udD1cInNoYWRlXCJcclxuICAgICAgICAvPlxyXG4gICAgICA8L0dyYWRpZW50PlxyXG4gICAgICA8Qm94PlxyXG4gICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxyXG4gICAgICAgICAgPFRleHQ+UGxlYXNlIFNlbGVjdCBhbiBvcHRpb246PC9UZXh0PlxyXG4gICAgICAgICAgPEJveD5cclxuICAgICAgICAgICAgPFRleHQ+MS4gVHJhbnNhY3Rpb248L1RleHQ+XHJcbiAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgIDxCb3g+XHJcbiAgICAgICAgICAgIDxUZXh0PjIuIE5ldyBBY2NvdW50PC9UZXh0PlxyXG4gICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICA8Qm94PlxyXG4gICAgICAgICAgICA8VGV4dD5xLiBFeGl0PC9UZXh0PlxyXG4gICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgIDwvQm94PlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gT3B0aW9ucztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN2QyxNQUFNO0VBQUVHLEdBQUc7RUFBRUMsSUFBSTtFQUFFQyxRQUFRO0VBQUVDO0FBQU8sQ0FBQyxHQUFHTixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3RELE1BQU1PLFNBQVMsR0FBR1AsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUN2QyxNQUFNUSxXQUFXLEdBQUdELFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztBQUMvQyxNQUFNRSxXQUFXLEdBQUdGLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQztBQUV6RCxNQUFNRyxPQUFPLEdBQUcsTUFBTTtFQUNwQixNQUFNO0lBQUVDO0VBQUssQ0FBQyxHQUFHTCxNQUFNLEVBQUU7RUFDekJELFFBQVEsQ0FBRU8sS0FBSyxJQUFLO0lBQ2xCLElBQUlBLEtBQUssS0FBSyxHQUFHLEVBQUU7TUFDakJELElBQUksRUFBRTtNQUNORSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFDekI7SUFDQSxJQUFJRixLQUFLLEtBQUssR0FBRyxFQUFFO01BQ2pCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxlQUFlLENBQUM7TUFDNUIsaUNBQUMsV0FBVyxPQUFHO0lBQ2pCO0lBQ0EsSUFBSUYsS0FBSyxLQUFLLEdBQUcsRUFBRTtNQUNqQkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsZUFBZSxDQUFDO01BQzVCLGlDQUFDLFdBQVcsT0FBRztJQUNqQjtFQUNGLENBQUMsQ0FBQztFQUVGLG9CQUNFLHVEQUNFLG9CQUFDLFFBQVE7SUFBQyxJQUFJLEVBQUM7RUFBVyxnQkFDeEIsb0JBQUMsT0FBTztJQUNOLElBQUksRUFBQyxpQ0FBaUM7SUFDdEMsS0FBSyxFQUFDLE1BQU07SUFDWixJQUFJLEVBQUM7RUFBTyxFQUNaLENBQ08sZUFDWCxvQkFBQyxHQUFHLHFCQUNGLG9CQUFDLEdBQUc7SUFBQyxhQUFhLEVBQUM7RUFBUSxnQkFDekIsb0JBQUMsSUFBSSxtQ0FBZ0MsZUFDckMsb0JBQUMsR0FBRyxxQkFDRixvQkFBQyxJQUFJLHlCQUFzQixDQUN2QixlQUNOLG9CQUFDLEdBQUcscUJBQ0Ysb0JBQUMsSUFBSSx5QkFBc0IsQ0FDdkIsZUFDTixvQkFBQyxHQUFHLHFCQUNGLG9CQUFDLElBQUksa0JBQWUsQ0FDaEIsQ0FDRixDQUNGLENBQ0w7QUFFUCxDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTixPQUFPIn0=