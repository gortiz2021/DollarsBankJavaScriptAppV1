const React = require("react");
const Gradient = require("ink-gradient");
const BigText = require("ink-big-text");
const {
  Box,
  Text,
  useInput,
  useApp
} = require("ink");
const importJsx = require("import-jsx");
const Transaction = importJsx("componentsTransaction.js");
const OpenAccount = importJsx("./components/openAccount");
const Options = () => {
  const {
    exit
  } = useApp();
  useInput(input => {
    if (input === "q") {
      exit();
      console.log("Goodbye!");
    }
    if (input === "1") {
      console.log("1 was pressed");
      /*#__PURE__*/React.createElement(Transaction, null);
    }
    if (input === "2") {
      console.log("2 was pressed");
      /*#__PURE__*/React.createElement(OpenAccount, null);
    }
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Gradient, {
    name: "instagram"
  }, /*#__PURE__*/React.createElement(BigText, {
    text: "Dollars Bank ATM Welcomes You!!",
    align: "left",
    font: "shade"
  })), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Please Select an option:"), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "1. Transaction")), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "2. New Account")), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "q. Exit")))));
};
module.exports = Options;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJHcmFkaWVudCIsIkJpZ1RleHQiLCJCb3giLCJUZXh0IiwidXNlSW5wdXQiLCJ1c2VBcHAiLCJpbXBvcnRKc3giLCJUcmFuc2FjdGlvbiIsIk9wZW5BY2NvdW50IiwiT3B0aW9ucyIsImV4aXQiLCJpbnB1dCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsic3RhcnR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcclxuY29uc3QgR3JhZGllbnQgPSByZXF1aXJlKFwiaW5rLWdyYWRpZW50XCIpO1xyXG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZShcImluay1iaWctdGV4dFwiKTtcclxuY29uc3QgeyBCb3gsIFRleHQsIHVzZUlucHV0LCB1c2VBcHAgfSA9IHJlcXVpcmUoXCJpbmtcIik7XHJcbmNvbnN0IGltcG9ydEpzeCA9IHJlcXVpcmUoXCJpbXBvcnQtanN4XCIpO1xyXG5jb25zdCBUcmFuc2FjdGlvbiA9IGltcG9ydEpzeChcImNvbXBvbmVudHNUcmFuc2FjdGlvbi5qc1wiKTtcclxuY29uc3QgT3BlbkFjY291bnQgPSBpbXBvcnRKc3goXCIuL2NvbXBvbmVudHMvb3BlbkFjY291bnRcIik7XHJcblxyXG5jb25zdCBPcHRpb25zID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XHJcbiAgdXNlSW5wdXQoKGlucHV0KSA9PiB7XHJcbiAgICBpZiAoaW5wdXQgPT09IFwicVwiKSB7XHJcbiAgICAgIGV4aXQoKTtcclxuICAgICAgY29uc29sZS5sb2coXCJHb29kYnllIVwiKTtcclxuICAgIH1cclxuICAgIGlmIChpbnB1dCA9PT0gXCIxXCIpIHtcclxuICAgICAgY29uc29sZS5sb2coXCIxIHdhcyBwcmVzc2VkXCIpO1xyXG4gICAgICA8VHJhbnNhY3Rpb24gLz47XHJcbiAgICB9XHJcbiAgICBpZiAoaW5wdXQgPT09IFwiMlwiKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiMiB3YXMgcHJlc3NlZFwiKTtcclxuICAgICAgPE9wZW5BY2NvdW50IC8+O1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPEdyYWRpZW50IG5hbWU9XCJpbnN0YWdyYW1cIj5cclxuICAgICAgICA8QmlnVGV4dFxyXG4gICAgICAgICAgdGV4dD1cIkRvbGxhcnMgQmFuayBBVE0gV2VsY29tZXMgWW91ISFcIlxyXG4gICAgICAgICAgYWxpZ249XCJsZWZ0XCJcclxuICAgICAgICAgIGZvbnQ9XCJzaGFkZVwiXHJcbiAgICAgICAgLz5cclxuICAgICAgPC9HcmFkaWVudD5cclxuICAgICAgPEJveD5cclxuICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIj5cclxuICAgICAgICAgIDxUZXh0PlBsZWFzZSBTZWxlY3QgYW4gb3B0aW9uOjwvVGV4dD5cclxuICAgICAgICAgIDxCb3g+XHJcbiAgICAgICAgICAgIDxUZXh0PjEuIFRyYW5zYWN0aW9uPC9UZXh0PlxyXG4gICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICA8Qm94PlxyXG4gICAgICAgICAgICA8VGV4dD4yLiBOZXcgQWNjb3VudDwvVGV4dD5cclxuICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgPEJveD5cclxuICAgICAgICAgICAgPFRleHQ+cS4gRXhpdDwvVGV4dD5cclxuICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgIDwvQm94PlxyXG4gICAgICA8L0JveD5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9wdGlvbnM7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN4QyxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdkMsTUFBTTtFQUFFRyxHQUFHO0VBQUVDLElBQUk7RUFBRUMsUUFBUTtFQUFFQztBQUFPLENBQUMsR0FBR04sT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN0RCxNQUFNTyxTQUFTLEdBQUdQLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDdkMsTUFBTVEsV0FBVyxHQUFHRCxTQUFTLENBQUMsMEJBQTBCLENBQUM7QUFDekQsTUFBTUUsV0FBVyxHQUFHRixTQUFTLENBQUMsMEJBQTBCLENBQUM7QUFFekQsTUFBTUcsT0FBTyxHQUFHLE1BQU07RUFDcEIsTUFBTTtJQUFFQztFQUFLLENBQUMsR0FBR0wsTUFBTSxFQUFFO0VBQ3pCRCxRQUFRLENBQUVPLEtBQUssSUFBSztJQUNsQixJQUFJQSxLQUFLLEtBQUssR0FBRyxFQUFFO01BQ2pCRCxJQUFJLEVBQUU7TUFDTkUsT0FBTyxDQUFDQyxHQUFHLENBQUMsVUFBVSxDQUFDO0lBQ3pCO0lBQ0EsSUFBSUYsS0FBSyxLQUFLLEdBQUcsRUFBRTtNQUNqQkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsZUFBZSxDQUFDO01BQzVCLGlDQUFDLFdBQVcsT0FBRztJQUNqQjtJQUNBLElBQUlGLEtBQUssS0FBSyxHQUFHLEVBQUU7TUFDakJDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGVBQWUsQ0FBQztNQUM1QixpQ0FBQyxXQUFXLE9BQUc7SUFDakI7RUFDRixDQUFDLENBQUM7RUFFRixvQkFDRSx1REFDRSxvQkFBQyxRQUFRO0lBQUMsSUFBSSxFQUFDO0VBQVcsZ0JBQ3hCLG9CQUFDLE9BQU87SUFDTixJQUFJLEVBQUMsaUNBQWlDO0lBQ3RDLEtBQUssRUFBQyxNQUFNO0lBQ1osSUFBSSxFQUFDO0VBQU8sRUFDWixDQUNPLGVBQ1gsb0JBQUMsR0FBRyxxQkFDRixvQkFBQyxHQUFHO0lBQUMsYUFBYSxFQUFDO0VBQVEsZ0JBQ3pCLG9CQUFDLElBQUksbUNBQWdDLGVBQ3JDLG9CQUFDLEdBQUcscUJBQ0Ysb0JBQUMsSUFBSSx5QkFBc0IsQ0FDdkIsZUFDTixvQkFBQyxHQUFHLHFCQUNGLG9CQUFDLElBQUkseUJBQXNCLENBQ3ZCLGVBQ04sb0JBQUMsR0FBRyxxQkFDRixvQkFBQyxJQUFJLGtCQUFlLENBQ2hCLENBQ0YsQ0FDRixDQUNMO0FBRVAsQ0FBQztBQUVEQyxNQUFNLENBQUNDLE9BQU8sR0FBR04sT0FBTyJ9